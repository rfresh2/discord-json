plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'com.github.ben-manes.versions' version '0.51.0'
    id 'net.researchgate.release' version '3.0.2'
}

ext {
    jdk = JavaVersion.current().majorVersion
    jdk_javadoc = "https://docs.oracle.com/javase/$jdk/docs/api/".toString()
    if (JavaVersion.current().isJava11Compatible()) {
        jdk_javadoc = "https://docs.oracle.com/en/java/javase/$jdk/docs/api/".toString()
    }

    reactor_bom_version = '2023.0.3'
    jackson_databind_version = '2.16.2'
    jackson_datatype_jsr310_version = '2.16.2'
    jackson_datatype_jdk8_version = '2.16.2'
    immutables_group = 'org.immutables'
    immutables_version = '2.10.1'

    junit_version = '5.10.2'
    logback_version = '1.5.3'

    isJitpack = "true" == System.getenv("JITPACK")
    isRelease = !version.toString().endsWith('-SNAPSHOT')
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'maven-publish'

    group 'com.discord4j'
    description 'Discord entity domain as immutable Jackson objects'

    repositories {
        mavenCentral()
        if (!isRelease || isJitpack) {
            maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
            maven { url 'https://oss.sonatype.org/content/repositories/staging' }
        }
        maven { url 'https://jitpack.io' }
        maven { url 'https://repo.spring.io/milestone' }
    }

    dependencies {
        compileOnly platform("io.projectreactor:reactor-bom:$reactor_bom_version")
        compileOnly 'io.projectreactor:reactor-core'
        testCompileOnly platform("io.projectreactor:reactor-bom:$reactor_bom_version")
        testCompileOnly 'io.projectreactor:reactor-core'
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 60, 'seconds'
    }

    tasks.withType(Javadoc) {
        options {
            encoding = 'UTF-8'
            tags = ["apiNote:a:API Note:",
                    "implSpec:a:Implementation Requirements:",
                    "implNote:a:Implementation Note:"]
            addStringOption 'Xdoclint:none', '-quiet'
            addStringOption 'encoding', 'UTF-8'
            // adding links to javadocs for filling specific classes when not existing inside current javadoc
            links = [
                    jdk_javadoc,
                    "https://javadoc.io/doc/com.fasterxml.jackson.core/jackson-databind/" + jackson_databind_version + "/"
            ]
        }
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.incremental = true
        /**
         * T.T
         * https://github.com/immutables/immutables/issues/1339
         */
        options.fork = true
        options.forkOptions.jvmArgs.add("--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED")
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    tasks.withType(Test) {
        useJUnitPlatform()
    }

}

dependencies {
    api project(':api')
    compileOnly project(':encoding')

    api "com.fasterxml.jackson.core:jackson-databind:$jackson_databind_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_datatype_jsr310_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jackson_datatype_jdk8_version"

    compileOnly "$immutables_group:value:$immutables_version"
    compileOnly "$immutables_group:builder:$immutables_version"
    annotationProcessor "$immutables_group:value:$immutables_version"

    testCompileOnly project(':encoding')
    testCompileOnly "$immutables_group:value:$immutables_version"
    testAnnotationProcessor "$immutables_group:value:$immutables_version"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junit_version"
    testImplementation "ch.qos.logback:logback-classic:$logback_version"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId archivesBaseName

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = "$project.name"
                description = 'Discord entity domain as immutable Jackson objects'
                url = 'https://github.com/Discord4J/discord-json'
                organization {
                    name = 'Discord4J'
                    url = 'https://discord4j.com'
                }
                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/Discord4J/discord-json/issues'
                }
                licenses {
                    license {
                        name = 'LGPL-3.0'
                        url = 'https://github.com/Discord4J/discord-json/LICENSE.txt'
                        distribution = 'repo'
                    }
                }
                scm {
                    url = 'https://github.com/Discord4J/discord-json'
                    connection = 'scm:git:git://github.com/Discord4J/discord-json.git'
                    developerConnection = 'scm:git:ssh://git@github.com:Discord4J/discord-json.git'
                }
                developers {
                    developer {
                        name = 'The Discord4J Team'
                    }
                }
            }
        }
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'discord-json',
                'Implementation-Version': archiveVersion,
                'Automatic-Module-Name': 'discord4j.discordjson'
    }
}

release {
    preTagCommitMessage = 'Release version'
    tagCommitMessage = 'Release version'
    newVersionCommitMessage = 'Next development version'
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
